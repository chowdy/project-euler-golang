package main

import (
	"./utils"
	"fmt"
)

/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
func Solution012() string {

	TARGET_DIVS := 500
	answer := 0

	for {
		currTri := utils.GetNextTriangleNumber()
		numDivs := 2

		// Skip this triangle number if it's not, like, "very divisble"
		// This is a dirty trick, I think, but it works...
		if currTri % 2 != 0 || currTri % 3 != 0 || currTri % 5 != 0 || currTri % 7 != 0 || currTri % 11 != 0 {
			continue
		}

		for i := 2; i < currTri; i++ {
			if currTri % i == 0 {
				numDivs++
			}
			if numDivs > TARGET_DIVS {
				answer = currTri
				return fmt.Sprint(answer)
			}
		}
	}

	return fmt.Sprint(answer)
}
